import sys
from PyQt5.QtWidgets import *
from PyQt5 import uic, QtGui, QtCore, QtWidgets
import numpy as np
from tensorflow.keras.models import load_model

form_class = uic.loadUiType("myomok20.ui")[0]
model = load_model('models/20201213_202430.h5')

class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.arr_ij=[
                [0,0],
                [0,1],
                [0,2],
                [0,3],
                [0,4]
            ]
        self.seq = 0
        
        self.arr2D = np.zeros((20,20))
        self.arr2pb = []
        self.flag_wb = True
        self.pbreset.clicked.connect(self.reset)
        self.flag_ing = True
        
        for i in range(20):
            line = []
            for j in range(20):
                pb = QPushButton(self)
                pb.setIcon(QtGui.QIcon('0.png'))
                pb.setIconSize(QtCore.QSize(40,40))
                pb.setGeometry(QtCore.QRect(40*j, 40*i, 40, 40))
                pb.clicked.connect(self.myclick)
                pb.setToolTip("{},{}".format(i, j))
                line.append(pb)
            self.arr2pb.append(line)
        
        self.myrender()
     
    def reset(self):   
        self.flag_ing = True
        self.flag_wb = True
        self.seq = 0
        for i in range(19):
            for j in range(19):
                self.arr2D[i][j] = 0
        self.myrender()
        
    def myrender(self):    
        for i in range(20):
            for j in range(20):
                if self.arr2D[i][j] == 0:
                    self.arr2pb[i][j].setIcon(QtGui.QIcon('0.png'))
                if self.arr2D[i][j] == 1:
                    self.arr2pb[i][j].setIcon(QtGui.QIcon('1.png'))
                if self.arr2D[i][j] == 2:
                    self.arr2pb[i][j].setIcon(QtGui.QIcon('2.png'))
        
    def myclick(self): 
        if not self.flag_ing :
            return
        str = self.sender().toolTip()
        arr = str.split(",")
        i = int(arr[0])
        j = int(arr[1])
        
        if self.arr2D[i][j] > 0:
            return
        
        int_wb = 0
        if self.flag_wb == True:
            self.arr2D[i][j] = 1
            int_wb = 1
        else:
            self.arr2D[i][j] = 2
            int_wb = 2
        self.myrender()
        
        up = self.getUP(i,j,int_wb)
        dw = self.getDW(i, j, int_wb)
        ri = self.getRI(i, j, int_wb)
        le = self.getLE(i, j, int_wb)
        
        ur = self.getUR(i, j, int_wb)
        ul = self.getUL(i, j, int_wb)
        dr = self.getDR(i, j, int_wb)
        dl = self.getDL(i, j, int_wb)
        
        if up + dw + 1 == 5 or le + ri + 1 == 5 or ul + dr + 1 == 5 or ur + dl + 1 == 5:
            if self.flag_wb:
                QtWidgets.QMessageBox.about(self, "Omok", "흰돌 승리!")
            else:
                QtWidgets.QMessageBox.about(self, "Omok", "검은돌 승리!")
            self.flag_ing = False
        
        self.flag_wb = not self.flag_wb
        
        if not self.flag_ing :
            return
        
        
        input = np.array(self.arr2D)
        print('바뀌기 전 input')
        for i in input:
            print(i.shape)
        input[(input != 1) & (input != 0)] = -1
        input[(input == 1) & (input != 0)] = 1
        print('바꾸고 난 input', input)
        input = np.expand_dims(input, axis=(0, -1)).astype(np.float32)
        
        output = model.predict(input)
        output = output.reshape((20,20))
        
        com_i = 0
        com_j = 0
        while True:
            com_j, com_i = np.unravel_index(np.argmax(output), output.shape)
            if self.arr2D[com_i][com_j] == 0:
                print(com_i, com_j)
                print('컴퓨터 놨다')
                break

       
        # com_i = np.random.randint(0, 20)
        # com_j = np.random.randint(0, 20)
        
        print(com_i, com_j)
        # com_i = self.arr_ij[self.seq][0]
        # com_j = self.arr_ij[self.seq][1]
        
        self.seq += 1
        
        int_wb = 0
        if self.flag_wb == True:
            self.arr2D[com_i][com_j] = 1
            int_wb = 1
        else:
            self.arr2D[com_i][com_j] = 2
            int_wb = 2
        self.myrender()
        
        
        up = self.getUP(com_i, com_j,int_wb)
        dw = self.getDW(com_i, com_j, int_wb)
        ri = self.getRI(com_i, com_j, int_wb)
        le = self.getLE(com_i, com_j, int_wb)
                               
        ur = self.getUR(com_i, com_j, int_wb)
        ul = self.getUL(com_i, com_j, int_wb)
        dr = self.getDR(com_i, com_j, int_wb)
        dl = self.getDL(com_i, com_j, int_wb)
        
        if up + dw + 1 == 5 or le + ri + 1 == 5 or ul + dr + 1 == 5 or ur + dl + 1 == 5:
            if self.flag_wb:
                QtWidgets.QMessageBox.about(self, "Omok", "흰돌 승리!")
            else:
                QtWidgets.QMessageBox.about(self, "Omok", "검은돌 승리!")
            self.flag_ing = False
        
        self.flag_wb = not self.flag_wb
        
    
    
    def getDL(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i += 1
                j -= 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getDR(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i += 1
                j += 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getUL(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i -= 1
                j -= 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getUR(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i -= 1
                j += 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getLE(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                j -= 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    
    def getRI(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                j += 1
                if i < 0 : 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
     
    def getDW(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i += 1
                if i < 0: 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getUP(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i -= 1
                if i < 0: 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
            
       
       
       
if __name__ == '__main__':
    app = QApplication(sys.argv)
    myWindow =MyWindow()
    myWindow.show()
    app.exec_()
        