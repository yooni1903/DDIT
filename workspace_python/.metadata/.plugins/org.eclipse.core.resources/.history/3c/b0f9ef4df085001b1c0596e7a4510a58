import sys
from PyQt5.QtWidgets import *
from PyQt5 import uic, QtGui, QtCore, QtWidgets

form_class = uic.loadUiType("myomok.ui")[0]

class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.arr2D = [
                [0,0,0,0,0, 0,0,0,0,0],
                [0,0,0,0,0, 0,0,0,0,0],
                [0,0,0,0,0, 0,0,0,0,0],
                [0,0,0,0,0, 0,0,0,0,0],
                [0,0,0,0,0, 0,0,0,0,0],
                
                [0,0,0,0,0, 0,0,0,0,0],
                [0,0,0,0,0, 0,0,0,0,0],
                [0,0,0,0,0, 0,0,0,0,0],
                [0,0,0,0,0, 0,0,0,0,0],
                [0,0,0,0,0, 0,0,0,0,0]
            ]
        self.arr2pb = []
        self.flag_wb = True
        self.pbreset.clicked.connect(self.reset)
        self.flag_ing = True
        
        for i in range(10):
            line = []
            for j in range(10):
                pb = QPushButton(self)
                pb.setIcon(QtGui.QIcon('0.png'))
                pb.setIconSize(QtCore.QSize(40,40))
                pb.setGeometry(QtCore.QRect(40*j, 40*i, 40, 40))
                pb.clicked.connect(self.myclick)
                pb.setToolTip("{},{}".format(i, j))
                line.append(pb)
            self.arr2pb.append(line)
        
        self.myrender()
     
    def reset(self):   
        for i in range(10):
            for j in range(10):
                self.arr2D[i][j] = 0
        self.myrender()
        self.flag_ing == True
        
    def myrender(self):    
        for i in range(10):
            for j in range(10):
                if self.arr2D[i][j] == 0:
                    self.arr2pb[i][j].setIcon(QtGui.QIcon('0.png'))
                if self.arr2D[i][j] == 1:
                    self.arr2pb[i][j].setIcon(QtGui.QIcon('1.png'))
                if self.arr2D[i][j] == 2:
                    self.arr2pb[i][j].setIcon(QtGui.QIcon('2.png'))
        
    def myclick(self): 
        if self.flag_ing == False:
            return
        str = self.sender().toolTip()
        arr = str.split(",")
        i = int(arr[0])
        j = int(arr[1])
        
        if self.arr2D[i][j] > 0:
            return
        
        int_wb = 0
        if self.flag_wb == True:
            self.arr2D[i][j] = 1
            int_wb = 1
        else:
            self.arr2D[i][j] = 2
            int_wb = 2
        self.myrender()
        
        up = self.getUP(i,j,int_wb)
        dw = self.getDW(i, j, int_wb)
        ri = self.getRI(i, j, int_wb)
        le = self.getLE(i, j, int_wb)
        
        ur = self.getUR(i, j, int_wb)
        ul = self.getUL(i, j, int_wb)
        dr = self.getDR(i, j, int_wb)
        dl = self.getDL(i, j, int_wb)
        # print("up",up)
        # print("dw",dw)
        # print("RI",ri)
        # print("LE",le)
        # print("UR",ur)
        # print("UL", ul)
        # print("DR", dr)
        # print("DL", dl)
        
        if up + dw + 1 == 5 or le + ri + 1 == 5 or ul + dr + 1 == 5 or ur + dl + 1 == 5:
            if self.flag_wb:
                QtWidgets.QMessageBox.about(self, "Omok", "흰돌 승리!")
            else:
                QtWidgets.QMessageBox.about(self, "Omok", "검은돌 승리!")
            self.flag_ing = False
            # msg = QMessageBox()
            # msg.setWindowTitle("경기 끝!")
            # if self.flag_wb == True:
                # msg.setText("흰돌 승리!")
            # else:
                # msg.setText("검은돌 승리!")
            # msg.setStandardButtons(QMessageBox.Ok)
            # result = msg.exec_()
            # if result == QMessageBox.Ok:
                # self.send_valve_popup_signal.emit(True)
            # return
        
        self.flag_wb = not self.flag_wb
    
    
    def getDL(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i += 1
                j -= 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getDR(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i += 1
                j += 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getUL(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i -= 1
                j -= 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getUR(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i -= 1
                j += 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getLE(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                j -= 1
                if i < 0: 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    
    def getRI(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                j += 1
                if i < 0 : 
                    return cnt
                if j < 0 : 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
     
    def getDW(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i += 1
                if i < 0: 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
    
    def getUP(self,i,j,int_wb):
        cnt = 0
        try:
            while True:
                i -= 1
                if i < 0: 
                    return cnt
                if self.arr2D[i][j] == int_wb:
                    cnt +=1 
                else:
                    return cnt
        except:
            return cnt
            
       
       
       
if __name__ == '__main__':
    app = QApplication(sys.argv)
    myWindow =MyWindow()
    myWindow.show()
    app.exec_()
        