/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-26 06:53:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._09;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;

public final class cookieDesc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>09/cookieDesc.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>Cookie</h4>\r\n");
      out.write("<pre>\r\n");
      out.write("\t: Http의 stateless 특성을 보완하기 위해 최소한의 상태 정보를 저장하는 개념\r\n");
      out.write("\t\t1. session : 상태 정보를 서버 사이드에서 유지.\r\n");
      out.write("\t\t2. cookie : 상태 정보를 클라이언트 사이드에서 유지.\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t** 쿠키 사용 방법\r\n");
      out.write("\t\t");

			Cookie sampleCookie = new Cookie("sampleCookie", "CookieValue");
			response.addCookie(sampleCookie);
			
			String koreanValue = URLEncoder.encode("한글쿠키", "UTF-8");
			
			Cookie koreanCookie = new Cookie("koreanCookie", koreanValue);
			response.addCookie(koreanCookie);
			
// 			Cookie allDomain = new Cookie("allDomainCookie", "all domain");
			// tomcat 8.5버전에서는 이런 도메인 설정이 불가능 하다
			// 확인하려면 7버전으로 갈것!
// 			allDomain.setDomain(".kdy.com");
// 			response.addCookie(allDomain);
			
			Cookie allPathCookie = new Cookie("allPathCookie", "All~Path~");
			
			// 이 Path는 클라이언트쪽의 브라우저가 사용하는 것이기 때문에
			// 클라이언트가 사용할 수 있는 reqeust.getContextPath를 사용해야한다.
			// 그런데 만약 tomcat8.5안에 구동되고 있는 application이 두 개였을 때 이 두개 사이에서
			// 세션을 공유하고 싶다면, localhost 아래에 존재하는 모든 application에 접근할 수 있도록
			// path를 설정해주면 되는데 이때는 "/"이 해당한다. (최상위 도메인으로 간다는 것)
			allPathCookie.setPath("/");
			response.addCookie(allPathCookie);
			
			Cookie longLiveCookie = new Cookie("longLiveCookie", "Long~~");
			longLiveCookie.setMaxAge(-1);
			longLiveCookie.setPath(request.getContextPath());
			response.addCookie(longLiveCookie);
		
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t(서버사이드 기준)\r\n");
      out.write("\t\t1. 쿠키 생성\r\n");
      out.write("\t\t2. 응답에 쿠키를 포함하여 전송(Response Header 쿠키가 서버에서 만들어졌기 때문에 클라이언트로 보내야한다.)\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t(클라이언트 사이드)\r\n");
      out.write("\t\t3. 쿠키가 브라우저가 가진 저장소에 저장(한 클라이언트가 여러 개의 브라우저를 사용하고 있다면 저장소도 여러개)\r\n");
      out.write("\t\t4. 저장되어 있던 쿠키가 다음 번 요청에 실려 재전송된다.(Request Header)\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t(다시 서버 사이드)\r\n");
      out.write("\t\t5. 요청에 포함된 쿠키를 꺼내서 상태를 복원한다.\r\n");
      out.write("\t\t<a href=\"cookieView.jsp\">쿠키 확인하기(동일경로)</a>\r\n");
      out.write("\t\t<a href=\"../08/cookieView.jsp\">쿠키 확인하기(다른경로)</a>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t** 쿠키 속성의 종류\r\n");
      out.write("\t\t1. name(required) : 공백포함X, 특수문자X, _사용가능 (자바에서 사용하는 변수 선언 규칙과 동일)\r\n");
      out.write("\t\t2. value(required) : 특수문자를 포함하는 경우, RFC2396 규약에 따라 url encoding 방식을 사용한다.(복원시-decoding)\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t-----optional\r\n");
      out.write("\t\t3. domain(host) : 쿠키의 재전송을 결정하는 조건\r\n");
      out.write("\t\t\t생략시, 쿠키 생성 도메인이 기본값으로 반영됨\r\n");
      out.write("\t\t\tex) .naver.com으로 설정 되었다면, host에 상관없이 재전송 가능\r\n");
      out.write("\t\t4. path : 쿠키의 재전송을 결정하는 조건\r\n");
      out.write("\t\t\t다음번 요청이 설정된 경로 이하로 발생할 때만 재전송\r\n");
      out.write("\t\t\t생략 시, 쿠키 생성시의 경로가 기본 값으로 반영됨.\r\n");
      out.write("\t\t5. maxAge(expires) : 쿠키의 만료 시점 (second 단위)\r\n");
      out.write("\t\t\t생략 시, 기본값으로 세션과 동일한 만료 시점이 사용.\r\n");
      out.write("\t\t\t0 : 쿠키 삭제(쿠키의 모든 조건이 동일한 경우에만 적용된다.)\r\n");
      out.write("\t\t\t-1 : \r\n");
      out.write("\t\t6. httpOnly\r\n");
      out.write("\t\t7. secure\r\n");
      out.write("\t\t\r\n");
      out.write("</pre>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
