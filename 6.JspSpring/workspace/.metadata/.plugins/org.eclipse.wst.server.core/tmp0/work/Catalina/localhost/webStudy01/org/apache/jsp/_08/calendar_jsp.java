/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-25 10:21:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.TimeZone;
import java.util.Locale;
import java.text.DateFormatSymbols;
import java.util.Calendar;
import static java.util.Calendar.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("static java.util.Calendar");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.text.DateFormatSymbols");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.TimeZone");
    _jspx_imports_classes.add("java.util.Locale");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	String yearParam = request.getParameter("year");
	String monthParam = request.getParameter("month");
	String loc = request.getParameter("loc");
	String zoneParam = request.getParameter("timeZone");
	
	Locale locale = request.getLocale();
	TimeZone zone = TimeZone.getDefault();
	if(loc != null && !loc.isEmpty()){
		locale = Locale.forLanguageTag(loc);
	}
	if(zoneParam != null && !zoneParam.isEmpty()){
		zone = TimeZone.getTimeZone(zoneParam);
	}
	
	final Calendar TODAY = getInstance(zone, locale);
	
	Calendar calendar = getInstance(locale);
	
	if(yearParam != null && yearParam.matches("\\d{4}")){
		calendar.set(YEAR, Integer.parseInt(yearParam));
	}
	if(monthParam !=null && monthParam.matches("\\d|1[0-1]")){
		calendar.set(MONTH, Integer.parseInt(monthParam));
	}
		
		
	// 캘린더의 상태가 3월1일로 변환됨
	// 위에 static 을 임포트 해줬기 때문에 Calendar.을 붙이지 않아도 상수 사용이 가능
	calendar.set(DAY_OF_MONTH, 1);
	
	int dayOfWeek = calendar.get(DAY_OF_WEEK);
	int offset = dayOfWeek - 1;
	int maxDate = calendar.getActualMaximum(DAY_OF_MONTH);
	
	DateFormatSymbols dfs = DateFormatSymbols.getInstance(locale);
	
	// 한달 전으로 상태를 바꿔줌
	calendar.add(MONTH, -1);
	int beforeYear = calendar.get(YEAR);
	int beforeMonth = calendar.get(MONTH);
	
	// 한달 후의 달력
	calendar.add(MONTH, 2);
	int nextYear = calendar.get(YEAR);
	int nextMonth = calendar.get(MONTH);
	
	// 현재 달 달력으로 돌아옴
	calendar.add(MONTH, -1);
	
	int year = calendar.get(YEAR);
	int month = calendar.get(MONTH);
	
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("\t.sunday{\r\n");
      out.write("\t\tbackground: red;\r\n");
      out.write("\t}\r\n");
      out.write("\t.saturday{\r\n");
      out.write("\t\tbackground: blue;\r\n");
      out.write("\t}\r\n");
      out.write("\t.current{\r\n");
      out.write("\t\tbackground: green;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>");
      out.print(String.format(locale, "%tc", TODAY) );
      out.write("</h4>\r\n");
      out.write("<h4>\r\n");
      out.write("\t<a onclick=\"return clickHandler(event);\" href=\"#\" data-year=\"");
      out.print(beforeYear );
      out.write("\" data-month=\"");
      out.print(beforeMonth);
      out.write("\">◀◀◀</a>\r\n");
      out.write("\t");
      out.print(String.format("%1$tY, %1$tB", calendar) );
      out.write("\r\n");
      out.write("\t<a onclick=\"return clickHandler(event);\" href=\"#\" data-year=\"");
      out.print(nextYear );
      out.write("\" data-month=\"");
      out.print(nextMonth);
      out.write("\">▶▶▶</a>\r\n");
      out.write("</h4>\r\n");
      out.write("<form name=\"calForm\">\r\n");
      out.write("\t<input type=\"number\" name=\"year\" placeholder=\"년도\" value=\"");
      out.print(year );
      out.write("\" onchange=\"this.form.submit();\"/>\r\n");
      out.write("\t<select name=\"month\" onchange=\"this.form.submit();\">\r\n");
      out.write("\t\t");

			String[] months = dfs.getMonths();
			for(int i=0; i<months.length-1; i++){
				
      out.write("\r\n");
      out.write("\t\t\t\t<option ");
      out.print(i==month?"selected":"" );
      out.write(" value=\"");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(months[i] );
      out.write("</option>\r\n");
      out.write("\t\t\t\t");

			}
		
      out.write("\r\n");
      out.write("\t</select>\r\n");
      out.write("\t<select name=\"loc\" onchange=\"this.form.submit();\">\r\n");
      out.write("\t\t<option value=\"\">언어</option>\r\n");
      out.write("\t\t");

		Locale[] locales = Locale.getAvailableLocales();
		for(Locale tmp : locales){
			String dL = tmp.getDisplayLanguage(tmp);
			String dc = tmp.getDisplayCountry(tmp);
			if(dL.isEmpty() && dc.isEmpty()) continue;
			String selected = tmp.equals(locale) ? "selected" : "";
			
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<option ");
      out.print(selected );
      out.write(" value=\"");
      out.print(tmp.toLanguageTag());
      out.write('"');
      out.write('>');
      out.print(String.format("%s[%s]",dL,dc) );
      out.write("</option>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");

		}
		
      out.write("\r\n");
      out.write("\t</select>\r\n");
      out.write("\t<select name=\"timeZone\" onchange=\"this.form.submit();\">\r\n");
      out.write("\t");

		for(String tmpId : TimeZone.getAvailableIDs()){
			TimeZone tmpZone = TimeZone.getTimeZone(tmpId);
			
      out.write("\r\n");
      out.write("\t\t\t<option ");
      out.print(tmpZone.equals(zone)?"selected":"" );
      out.write(" value=\"");
      out.print(tmpId);
      out.write('"');
      out.write('>');
      out.print(tmpZone.getDisplayName() );
      out.write(" </option>\r\n");
      out.write("\t\t\t");

			
		}
	
      out.write("\r\n");
      out.write("</select>\r\n");
      out.write("</form>\r\n");
      out.write("<table>\r\n");
      out.write("\t<thead>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t");

		String[] weekDays = dfs.getWeekdays();
		for(int i=SUNDAY; i<=SATURDAY; i++){
			
      out.write("\r\n");
      out.write("\t\t\t<th>");
      out.print(weekDays[i] );
      out.write("</th>\r\n");
      out.write("\t\t\t");

		}
	
      out.write("\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t</thead>\r\n");
      out.write("\t<tbody>\r\n");
      out.write("\t");

		calendar.add(DATE, -offset);
		for(int row =1; row<=6; row++){
	
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t");

			for(int col=1; col<=7; col++){
				int date = calendar.get(DATE);
				String clz = col==SUNDAY?"sunday":
					col==SATURDAY?"saturday":
						(year==TODAY.get(YEAR) && month==TODAY.get(MONTH) && TODAY.get(DATE)==calendar.get(DATE) ) ? "current":"normal";
		
      out.write("\r\n");
      out.write("\t\t\t\t<td class=\"");
      out.print(clz);
      out.write('"');
      out.write('>');
      out.print(	date);
      out.write("</td>\r\n");
      out.write("\t\t");

				calendar.add(DATE, 1);
			}
		
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t");

		}
	
      out.write("\r\n");
      out.write("\t</tbody>\r\n");
      out.write("</table>\r\n");
      out.write("<script>\r\n");
      out.write("\tlet calForm = document.calForm;\r\n");
      out.write("\tif(!calForm) calForm = document.querySelector(\"[name='calForm']\");\r\n");
      out.write("\tfunction clickHandler(event){\r\n");
      out.write("\t\tevent.preventDefault();\r\n");
      out.write("\t\tlet dataset = event.target.dataset;\r\n");
      out.write("\t\tcalForm.year.value = dataset.year;\r\n");
      out.write("\t\tcalForm.month.value = dataset.month;\r\n");
      out.write("\t\tcalForm.submit();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
