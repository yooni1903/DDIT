/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-23 06:49:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._06;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;

public final class sessionDesc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>06/sessionDesc.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>HttpSession</h4>\r\n");
      out.write("<pre>\r\n");
      out.write("\t: 한 세션에 대한 정보를 가진 객체.\r\n");
      out.write("\t세션이란?\r\n");
      out.write("\t통로 : 클라이언트와 서버 사이의 유일하 ㄴ연결통로.\r\n");
      out.write("\t기간(시간) : 하나의 클라이언트가 하나의 에이전트를 이용해서 서버사이드어플을 사용하기 시작한 순간(최초의 요청)\r\n");
      out.write("\t\t\t사용 종료 이벤트가 종료가 발생할 때까지의 기간\r\n");
      out.write("\tsession lifecycle\r\n");
      out.write("\t생성 : 최초의 요청임이 식별되는 요청이 발생했을 때\r\n");
      out.write("\t\t\t-> 세션 하나에 식별자로 ID가 부여됨\r\n");
      out.write("\t\t\t");
      out.print(new Date(session.getCreationTime()) );
      out.write("\r\n");
      out.write("\t\t\t");
      out.print(session.getId() );
      out.write("\r\n");
      out.write("\t\t\t");
      out.print(new Date(session.getLastAccessedTime()) );
      out.write("\r\n");
      out.write("\t\t\t");
      out.print(session.getMaxInactiveInterval() );
      out.write("\r\n");
      out.write("\t종료\r\n");
      out.write("\t\t1) 명시적인 로그아웃\r\n");
      out.write("\t\t2) 브라우저 종료\r\n");
      out.write("\t\t3) 쿠키 삭제\r\n");
      out.write("\t\t4) timeout 이내에 새로운 요청이 발생하지 않을 때 -> 일정 시간(timeout) 이후 사라지게 되어있다.\r\n");
      out.write("\t\t\r\n");
      out.write("\t쿠키의 트래킹 모드(tracking mode)\t\t\r\n");
      out.write("\t\t1) Cookie : JSESSIONID이름의 쿠키를 통해 세션 아이디가 재전송되는 구조\r\n");
      out.write("\t\t2) URL : jsessionid라는 이름의 세션 파라미터를 요청 라인을 통해 재전송하는 구조\r\n");
      out.write("\t\t<a href=\"sessionDesc.jsp;jsessionid=");
      out.print(session.getId());
      out.write("\t\">세션 파라미터를 통해 세션 유지</a>\r\n");
      out.write("\t\t3) SSL\r\n");
      out.write("\t\t\r\n");
      out.write("</pre>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
