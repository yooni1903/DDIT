/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-19 08:42:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._05;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.TimeZone;
import java.util.Locale;
import java.util.Calendar;

public final class autoRequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.TimeZone");
    _jspx_imports_classes.add("java.util.Locale");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<!-- <meta http-equiv=\"Refresh\" content=\"10;url=http://www.naver.com\">\t바디에 있는 데이터이지만 응답 헤더의 역할을 대신함 -->\r\n");
      out.write("<title>05/autoRequest.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>Auto Request header</h4>\r\n");
      out.write("1) Refresh 헤더를 이용한 방식\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("2) html의 meta 태그를 이용\r\n");
      out.write("3) JS의 스케쥴링 함수 이용 : setInterval(페이지가 유지되야 유효하는 함수), setTimeout\r\n");
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("<h4>현재 서버의 시각 : <span id=\"serverTimer\"></span></h4>\r\n");
      out.write("<h4>현재 클라이언트의 시각 : <span id=\"clientTimer\"></span></h4>\r\n");
      out.write("<h4><span id=\"countdown\"></span>초 뒤에 네이버로 이동합니다.</h4>\r\n");
      out.write("\r\n");
      out.write("<!-- 매 1초마다 비동기 요청을 발생시키고, -->\r\n");
      out.write("<!-- 클라이언트에게 사용 언어를 입력 받을 것. -->\r\n");
      out.write("<!-- 클라이언트에게 가져오고 싶은 시간대를 입력받을 것  -->\r\n");
      out.write("<select name=\"loc\">\r\n");
      out.write("\t\t<option value=\"\">언어</option>\r\n");
      out.write("\t\t");

		Locale[] locales = Locale.getAvailableLocales();
		for(Locale tmp : locales){
			String dL = tmp.getDisplayLanguage(tmp);
			String dc = tmp.getDisplayCountry(tmp);
			if(dL.isEmpty() && dc.isEmpty()) continue;
			
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<option value=\"");
      out.print(tmp.toLanguageTag());
      out.write('"');
      out.write('>');
      out.print(String.format("%s[%s]",dL,dc) );
      out.write("</option>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");

		}
		
      out.write("\r\n");
      out.write("</select>\r\n");
      out.write("<select name=\"timeZone\">\r\n");
      out.write("\t");

		for(String tmpId : TimeZone.getAvailableIDs()){
			TimeZone tmpZone = TimeZone.getTimeZone(tmpId);
			
      out.write("\r\n");
      out.write("\t\t\t<option value=\"");
      out.print(tmpId);
      out.write('"');
      out.write('>');
      out.print(tmpZone.getDisplayName() );
      out.write(" </option>\r\n");
      out.write("\t\t\t");

			
		}
	
      out.write("\r\n");
      out.write("</select>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\tvar span = document.querySelector(\"#countdown\");\r\n");
      out.write("\tvar serverTimer = $(\"#serverTimer\");\r\n");
      out.write("\tvar locSel = $(\"[name='loc']\");\r\n");
      out.write("\tvar tzSel = $(\"[name='timeZone']\");\r\n");
      out.write("\tvar clientTimer = $(\"#clientTimer\");\r\n");
      out.write("\tconst INITTIME = 10;\r\n");
      out.write("\tvar timer = INITTIME;\t\r\n");
      out.write("\tvar jobId = setInterval(function(){\r\n");
      out.write("\t\t\t\t\tspan.innerHTML = --timer;\r\n");
      out.write("\t\t\t\t\tif(timer == 0) clearInterval(jobId);\r\n");
      out.write("\t\t\t\t}, 1000);\r\n");
      out.write("\t\r\n");
      out.write("\tsetInterval(function(){\r\n");
      out.write("\t\tvar data = {\r\n");
      out.write("// \t\t\t\tloc:locSel.val(),\r\n");
      out.write("\t\t\t\tzone:tzSel.val()\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tif(locSel.val()){\r\n");
      out.write("\t\t\tdata.loc=locSel.val();\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tdata.loc=\"");
      out.print(request.getLocale().toLanguageTag() );
      out.write("\";\r\n");
      out.write("\t\t}\r\n");
      out.write("// \t\tnew Intl.DateTimeFoarmat(new Intl.Locale(data.loc));\r\n");
      out.write("\t\tvar df = new Intl.DateTimeFormat(\r\n");
      out.write("\t\t\t\tnew Intl.Locale(data[\"loc\"]), {//== data.loc\r\n");
      out.write("\t\t\t\t\tdateStyle : \"long\",\r\n");
      out.write("\t\t\t\t\ttimeStyle : \"long\"\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t); \r\n");
      out.write("\t\tclientTimer.text(df.format(new Date()));\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : \"");
      out.print(request.getContextPath());
      out.write("/04/serverTime\",\r\n");
      out.write("\t\t\tdata: data,\r\n");
      out.write("\t\t\tdataType : \"text\",\r\n");
      out.write("\t\t\tsuccess : function(resp) {\r\n");
      out.write("\t\t\t\tserverTimer.text(resp);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(xhr, error, msg) {\r\n");
      out.write("\t\t\t\tconsole.log(xhr);\r\n");
      out.write("\t\t\t\tconsole.log(error);\r\n");
      out.write("\t\t\t\tconsole.log(msg);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}, 1000);\r\n");
      out.write("// \tsetTimeout(function() => {\t//\tfunction에는 해야할 일을 그 뒤에는 시간을 넘긴다.\r\n");
      out.write("// \t\tlocation.reload();\r\n");
      out.write("// \t}, 1000);\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<br><br><br>\r\n");
      out.write("클라이언트가 주기적으로 서버에게 요청을 보내는 방식 polling\r\n");
      out.write("\t-> 단점 : 서버에 과부하가 걸린다. 그래서 생긴 방식이 webSocket이고 웹소켓의 단점을 개선하기 위한 방식이\r\n");
      out.write("\t\t\t\t스톰프 방식이다.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
