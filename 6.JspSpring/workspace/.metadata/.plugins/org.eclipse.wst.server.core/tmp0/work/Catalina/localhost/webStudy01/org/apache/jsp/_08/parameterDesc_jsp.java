/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-25 08:05:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class parameterDesc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>08/parameterDesc.jsp</title>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/includee/preScript.jsp", out, false);
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form  id=\"paramForm\" action=\"");
      out.print(request.getContextPath() );
      out.write("/06/parameters\" method=\"post\">\r\n");
      out.write("<pre>\r\n");
      out.write("\t<input type=\"hidden\" name=\"param1\" value=\"hiddenParam\"/>\r\n");
      out.write("\t<input type=\"text\" name=\"param1\" placeholder=\"param1\"/>\r\n");
      out.write("\t<input type=\"text\" name=\"param1\" placeholder=\"param1\"/>\r\n");
      out.write("\t<input type=\"text\" name=\"param2\" placeholder=\"param2\"/>\r\n");
      out.write("\t<select name=\"param2\">\r\n");
      out.write("\t\t<option>option1</option>\r\n");
      out.write("\t\t<option>option2</option>\r\n");
      out.write("\t\t<option>option3</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t<select name=\"param3\" multiple>\r\n");
      out.write("\t\t<option>option1</option>\r\n");
      out.write("\t\t<option>option2</option>\r\n");
      out.write("\t\t<option>option3</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t<input type=\"checkbox\" name=\"param4\" value=\"1\"> CHECK1\r\n");
      out.write("\t<input type=\"checkbox\" name=\"param4\" value=\"2\"> CHECK2\r\n");
      out.write("\t<input type=\"checkbox\" name=\"param4\" value=\"3\"> CHECK3\r\n");
      out.write("\t<input type=\"radio\" name=\"param5\" value=\"RADIO1\"> RADIO1\r\n");
      out.write("\t<input type=\"radio\" name=\"param5\" value=\"RADIO2\"> RADIO2\r\n");
      out.write("\t<input type=\"button\" value=\"버튼\" />\r\n");
      out.write("\t<input type=\"submit\" value=\"전송\" />\r\n");
      out.write("\t<input type=\"reset\" value=\"취소\" />\r\n");
      out.write("</pre>\r\n");
      out.write("</form>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t$.fn.serializeJson=function(){\r\n");
      out.write("\t\tlet tagName = this.prop(\"tagName\").toLowerCase();\r\n");
      out.write("\t\t/* 여기 this는 jQeury객체 */\r\n");
      out.write("\t\tif(this.length!=1 || tagName != \"form\")\r\n");
      out.write("\t\t\tthrow \"form 에 대해서만 호출 가능한 함수\";\r\n");
      out.write("\t\tlet array= this.serializeArray();\r\n");
      out.write("// \t\tconsole.log(array);\r\n");
      out.write("\t\tlet obj = {}\r\n");
      out.write("// \t\tobj.param1 =[\"값1\", \"값2\", \"값3\"];\r\n");
      out.write("\t\t$(array).each(function(){\r\n");
      out.write("\t\t\tconsole.log(this);\r\n");
      out.write("\t\t\tlet name = this.name;\r\n");
      out.write("\t\t\tlet value = this.value;\r\n");
      out.write("\t\t\tif(obj[name] && Array.isArray(obj[name])){\r\n");
      out.write("\t\t\t\tvalue = obj[name].concat(value);\r\n");
      out.write("\t\t\t}else if(obj[name] || (typeof obj[name] == \"string\" && obj[name].trim()==\"\")){\r\n");
      out.write("\t\t\t\tlet tmpArray = [obj[name]];\r\n");
      out.write("\t\t\t\ttmpArray.push(value);\r\n");
      out.write("\t\t\t\tvalue = tmpArray;\r\n");
      out.write("\t\t\t}\t// if~else end\r\n");
      out.write("\t\t\tobj[name] = value;\r\n");
      out.write("\t\t\tconsole.log(obj);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\t// each end\r\n");
      out.write("\t\t\treturn obj;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#paramForm\").on(\"submit\", function(){\r\n");
      out.write("\t\tevent.preventDefault();\r\n");
      out.write("\t\tlet url = this.action;\r\n");
      out.write("\t\tlet method = this.method;\r\n");
      out.write("// \t\tlet enctype = this.enctype;\r\n");
      out.write("// \t\tlet data = $(this).serialize();\r\n");
      out.write("// \t\tlet data = $(this).serializeArray();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 밑 세줄은 세트\r\n");
      out.write("\t\tlet enctype = \"application/json;charset=UTF-8\";\r\n");
      out.write("\t\tlet data = $(this).serializeJson();\r\n");
      out.write("\t\tdata = JSON.stringify(data);\r\n");
      out.write("\t\tconsole.log(data);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: url,\r\n");
      out.write("\t\t\tmethod : method,\r\n");
      out.write("\t\t\tcontentType: enctype,\r\n");
      out.write("\t\t\tdata: data\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
