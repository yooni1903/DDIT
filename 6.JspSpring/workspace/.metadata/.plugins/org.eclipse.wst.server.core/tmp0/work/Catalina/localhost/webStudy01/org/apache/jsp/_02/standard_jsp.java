/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-16 05:23:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._02;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;

public final class standard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


				static String test = "정적 데이터";
				public void test2(){
					System.out.println(test);
				}
			
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>02/STANDARD.JSP</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>");
      out.print(new Date() );
      out.write("</h4>\r\n");
      out.write("<h4>JSP(Java Server Page)</h4>\r\n");
      out.write("<pre>\r\n");
      out.write("\t: 동적 웹 페이지 생성을 위한 서버사이드 스크립트 언어로 템플릿 구조를 완성하기 위해 사용되며,\r\n");
      out.write("\t  서블릿 스펙을 기반으로 동작한다.\r\n");
      out.write("\t  \r\n");
      out.write("\t구성 요소\r\n");
      out.write("\t1. 정적 텍스트 \r\n");
      out.write("\t2. scriptlet\t\r\n");
      out.write("\t");
	
	// 자바 코드 : 차후 서블릿 소스가 파싱될 때 _jspService 메소드의 지역코드화가 됨. (지역변수가 된다는 뜻)
		Date today = new Date();
		test2();
	
      out.write("\r\n");
      out.write("\t\t1) 지시자(directive)\t&lt;%@ 지시자명 속성들.. %&gt;\r\n");
      out.write("\t\t\t: 현재 jsp 페이지에 대한 환경 정보 meta 정보 설정에 사용.\r\n");
      out.write("\t\t\tpage (기본 설정) : page에 대한 기본 환경 정보 설정\r\n");
      out.write("\t\t\tinclude (옵션) : 정적 내포에 사용\r\n");
      out.write("\t\t\ttaglib (옵션) : 커스텀 태그 로딩에 사용\r\n");
      out.write("\t\t2) 표현식(expression)\t&lt;%= // 출력할 변수 혹은 값 %&gt;\r\n");
      out.write("\t\t3) 선언부(declaration)\t&lt;%!//정적 변수나 메소드의 선언 %&gt;\r\n");
      out.write("\t\t\t");
      out.write("\r\n");
      out.write("\t\t4) 주석(comment)\r\n");
      out.write("\t\t<!-- 주석  - client side comment-->\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t\t// 주석 - client side comment\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t\t<style>\r\n");
      out.write("\t\t\t/* 주석 - client side comment */\r\n");
      out.write("\t\t</style>\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\t\t");

		// 주석 - server side comment
		/* 주석 - server side comment*/
		
      out.write("\r\n");
      out.write("\t\t\t- client side comment : html, javascript, css / 응답 데이터에 포함되기 때문에 가능한 사용하지 않는 것을 권하고 있다.\r\n");
      out.write("\t\t\t- server side comment : jsp, java \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t3. 기본객체\r\n");
      out.write("\t4. action 태그\r\n");
      out.write("\t5. EL(표현언어)\r\n");
      out.write("\t6. JSTL(커스텀 태그 라이브러리)\r\n");
      out.write("\t\r\n");
      out.write("</pre>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
