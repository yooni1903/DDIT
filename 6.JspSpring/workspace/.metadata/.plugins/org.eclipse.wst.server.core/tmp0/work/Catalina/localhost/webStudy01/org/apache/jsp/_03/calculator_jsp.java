/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-18 06:54:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._03;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.or.ddit.enumpkg.MimeType;
import kr.or.ddit.enumpkg.OperatorType;
import java.io.PrintWriter;
import kr.or.ddit.enumpkg.Operator;

public final class calculator_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("kr.or.ddit.enumpkg.Operator");
    _jspx_imports_classes.add("kr.or.ddit.enumpkg.OperatorType");
    _jspx_imports_classes.add("kr.or.ddit.enumpkg.MimeType");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\tvar functionMap = {\r\n");
      out.write("\t\t\t\tjson:function(resp){\r\n");
      out.write("\t\t\t\t\tresultArea.text(resp.expression);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\txml:function(resp){\r\n");
      out.write("\t\t\t\t\tresultArea.text($(resp).find(\"expression\").text());\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\thtml:function(resp){\r\n");
      out.write("\t\t\t\t\tresultArea.html(resp);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tplain:function(resp){\r\n");
      out.write("\t\t\t\t\tresultArea.text(resp);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar mimeKind = $(\"#mimeKind\");\r\n");
      out.write("\t\tvar resultArea = $(\"#resultArea\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar calForm = $(\"#calForm\").on(\"submit\", function(event){\r\n");
      out.write("\t\t\tvar dataType = mimeKind.val();\r\n");
      out.write("\t\t\tif(!dataType){\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tevent.preventDefault();\r\n");
      out.write("\t\t\tvar action = this.action;\t\t// this는 html, $(this)는 JQeury\r\n");
      out.write("\t\t\tvar method = this.method;\r\n");
      out.write("\t\t\tvar data = $(this).serialize();\t\t// serialize() -> QeuryString 생성\r\n");
      out.write("\t\t\tvar options = {\r\n");
      out.write("\t\t\t\turl : action,\r\n");
      out.write("\t\t\t\tmethod : method,\r\n");
      out.write("\t\t\t\tdata : data,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Request_Header - Accept : text/plain[html, javascript], application/json[xml]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Response_Header - Content-Type : \r\n");
      out.write("\t\t\t\terror : function(xhr, error, msg) {\r\n");
      out.write("\t\t\t\t\tconsole.log(xhr);\r\n");
      out.write("\t\t\t\t\tconsole.log(error);\r\n");
      out.write("\t\t\t\t\tconsole.log(msg);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\toptions.dataType = dataType;\r\n");
      out.write("\t\t\toptions.success = functionMap[options.dataType];\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//ajax는 단순한 요청이며, 화면에 락을 걸 건지 아닌지를(비동기, 동기방식) 설정하기 위한 용도이다.\r\n");
      out.write("\t\t\t$.ajax(options);\r\n");
      out.write("\t\t\treturn false;\t// submit 버튼의 이벤트를 막는 명령어\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 1. left, rigth의 피연산자와 operator 이름의 연산자를 포함한 필수 파라미터 입력. -->\r\n");
      out.write("<!-- 2. 연산의 종류, 사칙연산 지원 -->\r\n");
      out.write("<!-- 3. 입력 데이터는 실수형. -->\r\n");
      out.write("<!-- 4. 파라미터 전송 : /03/calculator의 방향으로 전송(전송 데이터는 비노출 - post). -->\r\n");
      out.write("<!-- 5. 연산의 결과 : ex) 3 * 4 = 12와 같은 형태로 제공 -->\r\n");
      out.write("<select id=\"mimeKind\">\r\n");
      out.write("\t<option value=\"\">dataType 선택</option>\r\n");
      out.write("\t");

		for(MimeType tmp : MimeType.values()){
		
      out.write("\r\n");
      out.write("\t\t\t<option value=");
      out.print(tmp.name().toLowerCase() );
      out.write('>');
      out.print(tmp.name() );
      out.write("</option>\r\n");
      out.write("\t\t");

		}
	
      out.write("\r\n");
      out.write("</select>\r\n");
      out.write("<form id=\"calForm\" action=\"");
      out.print(request.getContextPath() );
      out.write("/03/calculator\" method=\"post\">\r\n");
      out.write("\t<input type=\"number\" name=\"left\" step=\"any\"/>\r\n");
      out.write("\t");

		for(OperatorType tmp : OperatorType.values()){
			
      out.write("\r\n");
      out.write("\t\t\t<label><input type=\"radio\" name=\"operator\" value=\"");
      out.print(tmp.name());
      out.write('"');
      out.write('/');
      out.write('>');
      out.print(tmp.getSign() );
      out.write("</label>\r\n");
      out.write("\t\t\t");

		}
	
	
      out.write("\r\n");
      out.write("\t<input type=\"number\" name=\"right\" step=\"any\"/>\r\n");
      out.write("\t<button type=\"submit\">=</button>\r\n");
      out.write("</form>\r\n");
      out.write("<div id=\"resultArea\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 내가 시도했던 코드 -->\r\n");
      out.write("\r\n");
      out.write("<!-- \t<input type=\"number\" name=\"left\"> -->\r\n");
      out.write("<!-- \t<select name=\"operator\" required> -->\r\n");
      out.write("<!-- \t\t<option value>기호</option> -->\r\n");
      out.write("\r\n");
      out.write("<!-- // \t\t\tString OPER = \"<option value='%1$s'>%1$s</option>\"; -->\r\n");
      out.write("<!-- // \t\t\tStringBuffer options = new StringBuffer(); -->\r\n");
      out.write("<!-- // \t\t\tfor(Operator op : Operator.values()){ -->\r\n");
      out.write("<!-- // \t\t\t\toptions.append(String.format(OPER, op.getOpName())); -->\r\n");
      out.write("<!-- // \t\t\t} -->\r\n");
      out.write("<!-- // \t\t\tout.println(options); -->\r\n");
      out.write("\r\n");
      out.write("<!-- \t</select> -->\r\n");
      out.write("<!-- \t<input type=\"number\" name=\"right\"> -->\r\n");
      out.write("<!-- \t<input type=\"submit\" value=\"전송\"> -->\r\n");
      out.write("<!-- </form> -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- // \tout.print(\"<div>\"+request.getAttribute(\"cal\")+\"</div>\"); -->\r\n");
      out.write("<!-- // } -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
