package kr.or.ddit.login;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.or.ddit.db.ConnectionFactory;

@WebServlet("/login/loginCheck.do")
public class LoginCheckServlet  extends HttpServlet{
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		HttpSession session = req.getSession();
		
		if(session.isNew()) {
			resp.sendError(400);
			return;
		}
		// 요청 분석
		String mem_id = req.getParameter("mem_id");
		String mem_pass = req.getParameter("mem_pass");
		String saveId = req.getParameter("saveId");
		String view = null;
		
		boolean redirect = false;
		String message = "";
		
		boolean valid = validate(mem_id, mem_pass);
		
		if(valid) {
			// 인증(id==password)
			boolean auth = authenticate(mem_id, mem_pass);
			if(auth) {
				// 인증에 성공을 하면 index.jsp로 이동(현재 요청 정보는 삭제한다) - redirect
				redirect = true;
				view = "/"; // index.jsp는 이미 default값으로 지정되어있기 때문에 생략이 가능하다
				session.setAttribute("authId", mem_id);
				Cookie idCookie = new Cookie("idCookie", mem_id);
				idCookie.setPath(req.getContextPath()); 
				int maxAge = 0;
				if("saveId".equals(saveId)) {
					maxAge = 60*60*24*7;
				}
				idCookie.setMaxAge(maxAge);
				
				resp.addCookie(idCookie);
			}else {
				redirect = true;
				// 인증에 실패하면 loginForm.jsp로 이동
				view = "/login/loginForm.jsp";
				//	2) 인증 실패(무조건 비밀번호가 잘못됐다고 가정. 아이디 상태 유지) - forward
				message="비번 오류";
				session.setAttribute("failedId", mem_id);
			}
		}else {
			//	1) 검증
			redirect = true;
			view = "/login/loginForm.jsp";
			message = "아이디 혹은 비밀번호 누락";
		}
		
		// view로 이동
		if(redirect) {
			req.getSession().setAttribute("message", message);
			resp.sendRedirect(req.getContextPath() + view);
		}else {
			req.setAttribute("message", message);
			req.getRequestDispatcher(view).forward(req, resp);
		}
		
		
	}


	private boolean validate(String mem_id, String mem_pass) {
		boolean valid = true;
		valid = !(mem_id == null || mem_id.isEmpty() || mem_pass == null || mem_pass.isEmpty());
		return valid;
	}
}
