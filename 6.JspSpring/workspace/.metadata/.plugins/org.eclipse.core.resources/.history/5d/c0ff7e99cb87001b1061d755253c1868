package kr.or.ddit.io;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

/**
 *  스트림 : 연속성을 가진 일련의 데이터의 흐름이면서 데이터의 전송 (단방향)통로
 *  
 *  스트림의 종류
 *    1. 전송 데이터의 크기
 *    	1) byte stream(1 byte) : XXXInputStream / XXXOutputStream
 *    		FileInputStream/FileOutputStream -> 1차 스트림(매체 바로 연결할 수 있다는 뜻)
 *    		SocketInputStream/SocketOutputStream
 *    		ByteInputStream/ByteOutputStream	-> 인메모리 방식으로 데이터를 읽어들이거나 기록할 수 있다.(매체가 인메모리) byte[]로 읽거나 쓴다.
 *    	2) character stream(1 char) : XXXReader / XXXWriter
 *    		FileReader/FileWriter
 *    		StringReader/StringWriter	-> 인메모리 방식으로 데이터를 읽어들이거나 기록할 수 있다.
 *    
 *    2. Stream 생성 방법
 *    	1) 1차 stream(단일형 스트림) : 매체를 대상으로 직접 생성(개방)하는 스트림
 *    	2) 2차 stream(연결형 스트림) : 1차 스트림을 대상으로 연결하는 보조형으로 사용하는 스트림
 *    		- buffered stream : BufferedReader
 *    		- filtered stream : DataInputStream
 *    		- object stream : ObjectInputStream	(Only Serializable 객체를 대상으로 직렬화/역직렬화를 수행할 수 있다.)
 *    			직렬화(Serialization) : 객체를 전송하거나 기록하기 위한 형태의 바이트 배열의 형태로 변환하는 작업
 *    			역직렬화(DeSerialization) : 기록되어있거나 전송된 바이트 배열로부터 원래 객체의 상태를 복원하는 작업
 *    
 *    ** 매체로부터 데이터를 읽어들이는 단계
 *    	1. 매체를 어플리케이션 내에서 핸들링할 수 있는 객체로 생성
 *    		new File(file system path), new ServerSocket(port)
 *    	2. 읽어들이기 위한 스트림 생성
 *    		1차 스트림 : new FileInputStream(file), socket.getInputStream()
 *    		1차와 2차의 규격을 맞춰주기 위한 작업(like 젠더, 어댑터) : new InputStreamReader
 *    		2차 스트림 : new BufferedReader()
 *    	3. stream end까지 읽기 반복(EOF : -1, null)
 *    	4. 자원 release : close	-> 완전 중요!
 */
public class StreamDesc {
	public static void main(String[] args) throws Exception {
//		d:/contents/오래된 노래_utf8.txt
		File folder = new File("d:/contents");
		File readFile = new File(folder, "오래된 노래.txt");		// 버추얼 머신에서도 인코딩은 기본으로 ut8로 지정해놓음
		String temp = null;
		
		FileReader reader = new FileReader(readFile);
		BufferedReader br = new BufferedReader(reader);
		
		while((temp = br.readLine()) != null) {
			System.out.println(temp);
		}
		
	}
}
