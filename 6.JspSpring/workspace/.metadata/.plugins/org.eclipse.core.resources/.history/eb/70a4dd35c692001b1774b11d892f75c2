package kr.or.ddit.member.controller;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;

import kr.or.ddit.member.service.IMemberService;
import kr.or.ddit.member.service.MemberServiceImpl;
import kr.or.ddit.vo.MemberVO;

@WebServlet("/member/memberUpdate.do")
public class MemberUpdateServlet extends HttpServlet{
	private IMemberService service = new MemberServiceImpl();
	
	private void addCommandAttribute(HttpServletRequest req) {
		// req에 새로운 속성을 해당 요청을 처리할 때 식별할 수 있도록 하기 위함
		req.setAttribute("command", "update");
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		addCommandAttribute(req);
		// 수정 form 제공(memberForm.jsp 재활용)
		HttpSession session = req.getSession();
		if(session.isNew()) {
			resp.sendError(400);
			return;
		}
		MemberVO authMember =(MemberVO) session.getAttribute("authMember");
		MemberVO member = service.retrieveMember(authMember.getMem_id());
		
		req.setAttribute("member", member);
		
		String view = "/WEB-INF/views/member/memberForm.jsp";
		req.getRequestDispatcher(view).forward(req, resp);
		
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		addCommandAttribute(req);
		// 현재 memberForm에 action이 없기 때문에 그곳에서  submit이벤트를 발생시키면 현재 브라우저인
		// 이곳으로 돌아온다.
		// 1. 요청
		MemberVO member = new MemberVO();
		try {
			BeanUtils.populate(member, req.getParameterMap());
		} catch (IllegalAccessException | InvocationTargetException e) {
			throw new RuntimeException(e);
		}
		
		// 2. 검증
		
		
		
		// 3. 로직
		// 4. 모델 전달
		// 5. 뷰 선택
		// 6. 이동
		
		
	}
}
